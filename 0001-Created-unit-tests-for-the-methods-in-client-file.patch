From 5369a4a8b213a93a8277657ba691417f22b655e5 Mon Sep 17 00:00:00 2001
From: Justin Lynch <justin.lynch876@gmail.com>
Date: Fri, 18 Sep 2020 16:16:33 -0500
Subject: [PATCH] Created unit tests for the methods in client file

---
 client_test.py | 29 ++++++++++++++++++++++++++++-
 1 file changed, 28 insertions(+), 1 deletion(-)

diff --git a/client_test.py b/client_test.py
index af2bf26..e36c9e4 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,5 +1,5 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint, getRatio
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
@@ -8,6 +8,8 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
@@ -15,10 +17,35 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
 
 
   """ ------------ Add more unit tests ------------ """
+  def test_getRatio_calculateRatio(self):
+    price_a = 356.4
+    price_b = 119.2
+    self.assertEqual(getRatio(price_a, price_b), price_a/price_b)
 
+  def test_getRatio_calculateRatioPriceBGreaterThanPriceA(self):
+    price_a = 119.2
+    price_b = 356.4
+    self.assertEqual(getRatio(price_a, price_b), price_a/price_b)
+ 
+  def test_getRatio_calculateRatioPriceBEqualZero(self):
+    price_a = 356.4
+    price_b = 0
+    self.assertEqual(getRatio(price_a, price_b), )
+
+  def test_getRatio_calculateRatioPriceAEqualZero(self):
+    price_a = 0
+    price_b = 119.7
+    self.assertEqual(getRatio(price_a, price_b), 0)
+
+  def test_getRatio_calculateRatioBothPricesEqualZero(self):
+    price_a = 0
+    price_b = 0
+    self.assertEqual(getRatio(price_a, price_b), )
 
 
 if __name__ == '__main__':
-- 
2.27.0.windows.1

